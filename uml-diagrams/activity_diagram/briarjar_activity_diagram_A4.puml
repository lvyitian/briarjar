/*
 * BriarJar -- a GUI and TUI prototype for the messenger Briar.
 * Copyright (C) 2022 BriarJar Project Team
 *
 * This file is part of BriarJar.
 *
 * BriarJar is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * BriarJar is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with BriarJar.  If not, see <https://www.gnu.org/licenses/>.
 */

@startuml

<style>
activityDiagram {
      BackgroundColor #f1fede
      FontSize 20
  activity {
    BackgroundColor #cefd8c
  }
  diamond {
    BackgroundColor #e8ece2
  }
  arrow {
  }
  partition {
  }
  note {
    BackgroundColor fdfdcc
  }
  â€¦
}
document {
}
</style>





(.)
note: Version: 1.0 (2022-02-19)
detach



start
:User starts\n   BriarJar;
:         Start\nBriar Process (BP);

fork
    :Running\n  Briar\nProcess\n   (BP);

fork again
    if (Account exists?) then ([Yes])
        :Show Screen\n   'Sign-In';
        repeat :Ask User for Passphrase;
            backward :Show\nError;
            :Validation\n   via BP>
            :Result\nvia BP<
        repeat while (Passphrase valid?) is ([No]) not ([Yes])
    else ([No])
        repeat :Show Screen\n   'Sign-Up';
            fork
                :Ask User for new\n     Username;
            fork again
                : Ask User for new\nstrong Passphrase;
            end fork;
            :Validation\n   via BP>
            :Result\nvia BP<
            backward :Show\nError;
        repeat while (Credentials valid?) is ([No]) not ([Yes])
    endif


(M)
detach
(M)





    #a5fd29 :=**Show Main Screen**;
        switch (User selects?)
            case ( [Add Contact])
                :Show Screen\n'Add Contact';
                fork
                    : Show\n User's\n  own\nContact\n  Link;
                fork again
                    repeat :Ask User for\n    foreign\nContact Link;
                    : Ask User for\nContact Alias;
                        backward :Show\nError;
                    repeat while (Link & Alias\n    valid?) is ([No]) not ([Yes])
                    :        Send\nContact Request\n        via BP>
                    :   Update\nContact List;
                end fork
                (M)
                detach

            case (\n [Remove\n  Contact])
                repeat :Show Screen\n'Contact List';
                    if (Contacts\nexisting?) then ([Yes])
                    else ([No])
                        : Show Info\n'No Contact';
                        detach
                    endif
                    :       User\nselects Contact;
                    :Show Screen\n'Confirmation';
                repeat while (   User\nconfirmed\nRemoval?) is ([No]) not ([Yes])
                :Remove Contact\n        via BP>
                :    Update\nMessage List;
                :       Update\nConversation List;
                :   Update\nContact List;
                (M)
                detach

            case ( [Conversations])
                repeat :    Show Screen\n'Conversation List';
                    if (User selects?) then ([Existing\n Conversation])
                    else ([New\n Conversation]\n)
                        :Show Screen\n'Contact List';
                        if (Contacts existing?) then ([Yes])
                        else ([No])
                            : Show Info\n'No Contact';
                            detach
                        endif
                        :User selects Contact;
                    endif
                    :Show Screen\n'Conversation';
                    fork
                        :   User\n  reads\nMessages;
                    fork again
                        repeat
                            repeat
                                :  User\n  edits\nMessage;
                            repeat while (Message\n Format\n  valid?) is (   [No]) not ([Yes])
                            :       User\nposts Message;
                            :Send Message\n      via BP>
                            :Message Status\n       via BP<
                            backward :Show\n Info;
                        repeat while (Message\n   sent?) is ([No]) not ([Yes])
                        :    Update\nMessage List;
                    end fork {and\n  /or}
                repeat while () is ([User goes back])
                detach

        endswitch


:User selected Quit<
:Ask BP to Stop>
    :Stop Result from BP<
    if (Error occurred?) then ([Yes])
        :Inform User via UI & Terminal Output;
    else ([No])
    endif




end fork;


stop
@enduml
