import java.util.jar.JarEntry
import java.util.jar.JarFile
import java.util.jar.JarOutputStream

import static java.util.Collections.list

plugins {
    id 'java'
    id 'application'
    id 'idea'
    id 'org.openjfx.javafxplugin' version '0.0.9'
}

group 'org.briarjar'
version '0.1'
mainClassName = 'org.briarjar.briarjar.Main'

allprojects {
    repositories {
        mavenCentral()
        google()
        jcenter()


        /*
        maven {
            url "https://oss.sonatype.org/service/local/repositories/releases/"
            artifactUrls "https://oss.sonatype.org/service/local/repositories/releases/content/com/googlecode/lanterna/lanterna/3.2.0-alpha1/"
        }

        flatDir {
            dirs 'libs'
        }
         */
    }
}

javafx {
    version = "17"
    modules = [ 'javafx.controls' ]
}

dependencies {

    implementation "com.google.dagger:dagger:2.24"
    annotationProcessor 'com.google.dagger:dagger-compiler:2.24'

    implementation project(path: ':briar:briar-core', configuration: 'default')
    implementation project(path: ':briar:bramble-java', configuration: 'default')

    // FIXME - adding dependencies using .jar-files in a local libs/ dir... makes gradle pointless
    // implementation name: "lanterna-3.1.1.jar"                // not working?!
    implementation fileTree(dir: 'libs', include: '*.jar')      // this works!

    // TODO create testImplementations (JUnit,...)
    /*
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    */
}

// Fix for "Unsupported JavaFX configuration" warning
run   {
    doFirst   {
        jvmArgs   =   [
                '--module-path', classpath.asPath,
                '--add-modules', 'javafx.controls',
                '--add-modules', 'javafx.fxml',
                '--add-modules', 'javafx.graphics',
                '--add-modules', 'javafx.base',
                '--add-modules', 'javafx.swing',
        ]
    }
}

// TODO create tests
/*
test {
    useJUnitPlatform()
}
 */

// TODO create a JAR
// jarFactory code from build.gradle of headless - (c) BriarProject
void jarFactory(Jar jarTask) {
    String jarArchitecture = "linux-x86_64"

    jarTask.doFirst {
        println 'Building ' + jarArchitecture + ' version has started'
    }
    jarTask.manifest {
        attributes(
                'Main-Class': 'org.briarjar.briarjar.Main'
        )
    }
    jarTask.setArchiveClassifier(jarArchitecture)
    jarTask.from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
            {
                String[] architectures = ["linux-aarch64", "linux-armhf", "linux-x86_64"]
                for (String arch : architectures) {
                    if (arch != jarArchitecture) {
                        exclude "obfs4proxy_" + arch + ".zip"
                        exclude "tor_" + arch + ".zip"
                    }
                }
            }
    jarTask.with jar
    jarTask.doLast {
        // Rename the original jar
        File jar = jarTask.archivePath
        String srcPath = jar.toString().replaceFirst('\\.jar$', '.unsorted.jar')
        File srcFile = new File(srcPath)
        jar.renameTo(srcFile)
        JarFile srcJarFile = new JarFile(srcFile)
        OutputStream destStream = new JarOutputStream(new FileOutputStream(jar))
        // Read and sort the entries
        Map<String, JarEntry> entries = new TreeMap<>()
        for (JarEntry e : list(srcJarFile.entries())) entries.put(e.getName(), e)
        // Write the sorted entries
        for (JarEntry srcEntry : entries.values()) {
            JarEntry destEntry = new JarEntry(srcEntry.getName())
            destEntry.setTime(0)
            destStream.putNextEntry(destEntry)
            InputStream srcStream = srcJarFile.getInputStream(srcEntry)
            int read
            byte[] buf = new byte[4096]
            while ((read = srcStream.read(buf, 0, buf.length)) != -1) {
                destStream.write(buf, 0, read)
            }
            destStream.closeEntry()
            srcStream.close()
        }
        destStream.close()
        srcJarFile.close()
        println 'Building ' + jarArchitecture + ' version has finished'
    }
}
/*
jar {
    manifest {
        attributes 'Main-Class': 'org.briarjar.briarjar.gui.Main'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
*/

// TODO check this
/*
buildscript {

    // keep version here sync when updating briar
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.3'
        classpath 'ru.vyarus:gradle-animalsniffer-plugin:1.5.0'
        classpath files('briar/libs/gradle-witness.jar')
    }

    repositories {
        jcenter()
        mavenLocal()
        google()
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    ext {
        dagger_version = '2.33'
        junit_version = '4.13.2'
        jmock_version = '2.12.0'
    }
}
 */